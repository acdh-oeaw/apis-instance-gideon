# Generated by Django 5.1.1 on 2025-04-17 05:31

import apis_core.generic.abc
import django.contrib.postgres.fields
import django.db.models.deletion
import django_interval.fields
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('apis_metainfo', '0016_remove_rootobject_self_contenttype'),
        ('relations', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BornIn',
            fields=[
                ('relation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='relations.relation')),
                ('date_date_to', models.DateField(auto_created=True, blank=True, editable=False, null=True)),
                ('date_date_from', models.DateField(auto_created=True, blank=True, editable=False, null=True)),
                ('date_date_sort', models.DateField(auto_created=True, blank=True, editable=False, null=True)),
                ('date', django_interval.fields.FuzzyDateParserField()),
                ('comment', models.TextField()),
                ('data_ok', models.BooleanField()),
                ('comment_date', models.TextField()),
                ('comment_place', models.TextField()),
            ],
            bases=('relations.relation',),
        ),
        migrations.CreateModel(
            name='Corrigendum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_id', models.IntegerField(editable=False)),
                ('data_old', models.CharField(null=True)),
                ('data_new', models.CharField(null=True)),
                ('review_by', models.CharField(null=True)),
                ('source', models.CharField()),
                ('category', models.CharField()),
            ],
            bases=(apis_core.generic.abc.GenericModel, models.Model),
        ),
        migrations.CreateModel(
            name='DiedIn',
            fields=[
                ('relation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='relations.relation')),
                ('date_date_to', models.DateField(auto_created=True, blank=True, editable=False, null=True)),
                ('date_date_from', models.DateField(auto_created=True, blank=True, editable=False, null=True)),
                ('date_date_sort', models.DateField(auto_created=True, blank=True, editable=False, null=True)),
                ('date', django_interval.fields.FuzzyDateParserField()),
                ('comment', models.TextField()),
                ('data_ok', models.BooleanField()),
                ('comment_date', models.TextField()),
                ('comment_place', models.TextField()),
            ],
            bases=('relations.relation',),
        ),
        migrations.CreateModel(
            name='PersonCorrigendum',
            fields=[
                ('relation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='relations.relation')),
            ],
            bases=('relations.relation',),
        ),
        migrations.CreateModel(
            name='PersonPublication',
            fields=[
                ('relation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='relations.relation')),
            ],
            bases=('relations.relation',),
        ),
        migrations.CreateModel(
            name='PersonQuote',
            fields=[
                ('relation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='relations.relation')),
            ],
            bases=('relations.relation',),
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('rootobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='apis_metainfo.rootobject')),
                ('label', models.CharField(blank=True, default='', max_length=4096, verbose_name='label')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='latitude')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='longitude')),
                ('feature_code', models.CharField(blank=True, default='', help_text='<a href="https://www.geonames.org/export/codes.html">Geonames Feature Code List</a>', max_length=16, verbose_name='feature code')),
                ('alternative_labels', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), null=True, size=None)),
            ],
            options={
                'abstract': False,
            },
            bases=('apis_metainfo.rootobject', models.Model),
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(blank=True, default='', max_length=4096, verbose_name='label')),
            ],
            options={
                'verbose_name': 'Profession',
                'verbose_name_plural': 'Professions',
            },
            bases=(apis_core.generic.abc.GenericModel, models.Model),
        ),
        migrations.CreateModel(
            name='ProfessionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(blank=True, default='', max_length=4096, verbose_name='label')),
            ],
            options={
                'verbose_name': 'Profession Category',
                'verbose_name_plural': 'Profession Categories',
            },
            bases=(apis_core.generic.abc.GenericModel, models.Model),
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_id', models.IntegerField(editable=False)),
                ('volume', models.IntegerField(null=True)),
                ('delivery', models.IntegerField(null=True)),
                ('page_bio', models.CharField(null=True)),
                ('page_number', models.CharField(null=True)),
                ('mentioned', models.IntegerField(null=True)),
            ],
            bases=(apis_core.generic.abc.GenericModel, models.Model),
        ),
        migrations.CreateModel(
            name='Quote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_id', models.IntegerField(editable=False)),
                ('quotation', models.CharField(null=True)),
                ('quotation_shortform', models.CharField(null=True)),
                ('attachments', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), help_text='NG_ATTACHMENTS', null=True, size=None)),
            ],
            bases=(apis_core.generic.abc.GenericModel, models.Model),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('rootobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='apis_metainfo.rootobject')),
                ('forename', models.CharField(blank=True, default='', max_length=4096, verbose_name='forname')),
                ('surname', models.CharField(blank=True, default='', max_length=4096, verbose_name='surname')),
                ('gender', models.CharField(blank=True, default='', max_length=4096, verbose_name='gender')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('date_of_death', models.DateField(blank=True, null=True, verbose_name='date of death')),
                ('old_id', models.IntegerField(editable=False)),
                ('alternative_names', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), help_text='WEITERE_NAMENSFORMEN', null=True, size=None)),
                ('title', models.CharField(help_text='ADELSPRAEDIKAT', null=True)),
                ('aristocratical', models.BooleanField(help_text='IST_ADELIG', null=True)),
                ('religion', models.CharField(help_text='K_RELIGION_ID', null=True)),
                ('religion_comment', models.CharField(help_text='RELIGION_ANMERKUNG', null=True)),
                ('religion_change', models.BooleanField(help_text='RELIGIONSWECHSEL', null=True)),
                ('order', models.CharField(help_text='K_ORDEN_ID', null=True)),
                ('kinfolk', models.TextField(help_text='VERWANDSCHAFT', null=True)),
                ('education', models.TextField(help_text='AUSBILDUNG', null=True)),
                ('career_path', models.TextField(help_text='BERUF_LAUFBAHN', null=True)),
                ('life_center', models.TextField(help_text='GEOGRAPH_LEBENSMITTELPUNKT', null=True)),
                ('special_accomplishments', models.TextField(help_text='BESONDERE_LEISTUNGEN', null=True)),
                ('characteristics', models.TextField(help_text='PERS_EIGENSCHAFTEN', null=True)),
                ('honours', models.TextField(help_text='EHRUNGEN', null=True)),
                ('appreciations', models.TextField(help_text='WUERDIGUNGEN', null=True)),
                ('works', models.TextField(help_text='WERKSANGABEN', null=True)),
                ('archives', models.TextField(help_text='ARCHIVALIEN', null=True)),
                ('notes', models.TextField(help_text='MITTEILUNGEN', null=True)),
                ('corrigenda', models.TextField(help_text='CORRIGENDA', null=True)),
                ('corrigenda_source', models.TextField(help_text='CORRIGENDA_HERKUNFT', null=True)),
                ('curriculum_vitae', models.TextField(help_text='LEBENSLAUF', null=True)),
                ('generic_comment', models.TextField(help_text='ALLGEMEINE_ANMERKUNG', null=True)),
                ('comment_person', models.TextField(help_text='ANMERKUNG_PERSON', null=True)),
                ('comment_religion', models.TextField(help_text='ANMERKUNG_RELIGION', null=True)),
                ('comment_work', models.TextField(help_text='ANMERKUNG_BERUF', null=True)),
                ('comment_kinfolk', models.TextField(help_text='ANMERKUNG_VERWANDTSCHAFT', null=True)),
                ('literature', models.TextField(help_text='LITERATURANGABEN', null=True)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), help_text='BIOGRAFIEN_LINKS', null=True, size=None)),
                ('field_comments', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), help_text='NG_COMMENTS', null=True, size=None)),
                ('profession', models.ManyToManyField(blank=True, help_text='BERUF', to='apis_instance_gideon.profession')),
                ('professioncategory', models.ForeignKey(blank=True, help_text='K_BERUFSGRUPPEN_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='apis_instance_gideon.professioncategory')),
            ],
            options={
                'abstract': False,
            },
            bases=('apis_metainfo.rootobject', models.Model),
        ),
        migrations.CreateModel(
            name='VersionPerson',
            fields=[
                ('rootobject_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='apis_metainfo.rootobject')),
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('forename', models.CharField(blank=True, default='', max_length=4096, verbose_name='forname')),
                ('surname', models.CharField(blank=True, default='', max_length=4096, verbose_name='surname')),
                ('gender', models.CharField(blank=True, default='', max_length=4096, verbose_name='gender')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('date_of_death', models.DateField(blank=True, null=True, verbose_name='date of death')),
                ('version_tag', models.CharField(blank=True, max_length=255, null=True)),
                ('old_id', models.IntegerField(editable=False)),
                ('alternative_names', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), help_text='WEITERE_NAMENSFORMEN', null=True, size=None)),
                ('title', models.CharField(help_text='ADELSPRAEDIKAT', null=True)),
                ('aristocratical', models.BooleanField(help_text='IST_ADELIG', null=True)),
                ('religion', models.CharField(help_text='K_RELIGION_ID', null=True)),
                ('religion_comment', models.CharField(help_text='RELIGION_ANMERKUNG', null=True)),
                ('religion_change', models.BooleanField(help_text='RELIGIONSWECHSEL', null=True)),
                ('order', models.CharField(help_text='K_ORDEN_ID', null=True)),
                ('kinfolk', models.TextField(help_text='VERWANDSCHAFT', null=True)),
                ('education', models.TextField(help_text='AUSBILDUNG', null=True)),
                ('career_path', models.TextField(help_text='BERUF_LAUFBAHN', null=True)),
                ('life_center', models.TextField(help_text='GEOGRAPH_LEBENSMITTELPUNKT', null=True)),
                ('special_accomplishments', models.TextField(help_text='BESONDERE_LEISTUNGEN', null=True)),
                ('characteristics', models.TextField(help_text='PERS_EIGENSCHAFTEN', null=True)),
                ('honours', models.TextField(help_text='EHRUNGEN', null=True)),
                ('appreciations', models.TextField(help_text='WUERDIGUNGEN', null=True)),
                ('works', models.TextField(help_text='WERKSANGABEN', null=True)),
                ('archives', models.TextField(help_text='ARCHIVALIEN', null=True)),
                ('notes', models.TextField(help_text='MITTEILUNGEN', null=True)),
                ('corrigenda', models.TextField(help_text='CORRIGENDA', null=True)),
                ('corrigenda_source', models.TextField(help_text='CORRIGENDA_HERKUNFT', null=True)),
                ('curriculum_vitae', models.TextField(help_text='LEBENSLAUF', null=True)),
                ('generic_comment', models.TextField(help_text='ALLGEMEINE_ANMERKUNG', null=True)),
                ('comment_person', models.TextField(help_text='ANMERKUNG_PERSON', null=True)),
                ('comment_religion', models.TextField(help_text='ANMERKUNG_RELIGION', null=True)),
                ('comment_work', models.TextField(help_text='ANMERKUNG_BERUF', null=True)),
                ('comment_kinfolk', models.TextField(help_text='ANMERKUNG_VERWANDTSCHAFT', null=True)),
                ('literature', models.TextField(help_text='LITERATURANGABEN', null=True)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), help_text='BIOGRAFIEN_LINKS', null=True, size=None)),
                ('field_comments', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), help_text='NG_COMMENTS', null=True, size=None)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('professioncategory', models.ForeignKey(blank=True, db_constraint=False, help_text='K_BERUFSGRUPPEN_ID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='apis_instance_gideon.professioncategory')),
            ],
            options={
                'verbose_name': 'historical person',
                'verbose_name_plural': 'historical persons',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model, apis_core.generic.abc.GenericModel),
        ),
        migrations.CreateModel(
            name='VersionPerson_profession',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='apis_instance_gideon.versionperson')),
                ('person', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='apis_instance_gideon.person')),
                ('profession', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='apis_instance_gideon.profession')),
            ],
            options={
                'verbose_name': 'VersionPerson_profession',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
